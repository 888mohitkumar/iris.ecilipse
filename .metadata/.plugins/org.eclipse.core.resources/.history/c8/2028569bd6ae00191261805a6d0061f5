package com.ds.ciena;

import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.atomic.AtomicInteger;

public class FiveTon {

	public static void main(final String[] args) {
		/*
		 * System.out.println(ThreeTonClass.getInstance().hashCode());
		 * System.out.println(ThreeTonClass.getInstance().hashCode());
		 * System.out.println(ThreeTonClass.getInstance().hashCode());
		 * System.out.println(ThreeTonClass.getInstance().hashCode());
		 * System.out.println(ThreeTonClass.getInstance().hashCode());
		 * System.out.println(ThreeTonClass.getInstance().hashCode());
		 */
		final BlockingQueue<Integer> bq1 = new ArrayBlockingQueue<>(3);
		try {
			bq1.put(1);
			bq1.put(1);
			bq1.put(1);
			// bq1.put(1);
		} catch (final InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println(bq1);

		// System.out.println(ThreeTonClass.bq);
	}

}

class ThreeTonClass {

	private static ThreeTonClass instance = null;
	private static volatile AtomicInteger counter = new AtomicInteger(0);
	public static BlockingQueue<ThreeTonClass> bq = new ArrayBlockingQueue<>(3);
	static {
		try {
			bq.put(ThreeTonClass.getInstance());
			bq.put(ThreeTonClass.getInstance());
			bq.put(ThreeTonClass.getInstance());
			bq.put(ThreeTonClass.getInstance());
		} catch (final InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private static synchronized ThreeTonClass getInstance() {
		if (counter.get() >= 3) {
			return instance;
		}
		counter.incrementAndGet();
		instance = new ThreeTonClass();
		return instance;

	}

	private ThreeTonClass() {
	}

}
