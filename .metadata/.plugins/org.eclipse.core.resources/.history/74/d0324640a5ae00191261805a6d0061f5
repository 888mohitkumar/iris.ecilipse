package com.ds.ciena;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;

public class LruCache {

	public static void LRU(final List<Integer> list) {
		final HashMap<Integer, Integer> hashMap = new HashMap<>();
		final TreeMap<Integer, Integer> tmap = new TreeMap<>((o1, o2) -> {
			final int key1 = o1;
			final int key2 = o2;
			final int value1 = hashMap.get(key1);
			final int value2 = hashMap.get(key2);
			return value1 - value2;
		});
		final List<Integer> cache = new ArrayList<>();
		int number = 0;
		for (final Integer key : list) {
			System.out.println("value demand is :::::::::" + key);
			System.out.println("cache current elements ::" + cache);
			if (cache.contains(key)) {
				hashMap.put(key, number += number);
			} else {
				if (cache.size() >= 3) {
					tmap.clear();
					tmap.putAll(hashMap);
					final int lastPage = tmap.lastKey();
					list.remove(new Integer(lastPage));
					hashMap.remove(lastPage);
					list.add(key);
					hashMap.put(key, number += number);
				} else {
					cache.add(key);
					hashMap.put(key, number += number);
				}
			}
		}
	}

	public static void main(final String[] args) {
		List<Integer> list = Arrays.asList(1, 2, 3, 4, 1, 2, 5, 1, 2, 3, 4, 5);
		LRU(list);
	}

}
